def short_flatten_array(arr_one, arr_two):
  list3 = arr_one + arr_two
  list3.sort()
  print(list3)

short_flatten_array([1,5,6], [2,3,7])

# First, he'll need a general Podracer class defined with max_speed, condition (perfect, trashed, repaired) and price attributes.
# Define a repair() method that will update the condition of the podracer to "repaired".
# Define a new class, AnakinsPod that inherits the Podracer class, but also contains a special method called boost that will multiply max_speed by 2.
# Define another class that inherits Podracer and call this one SebulbasPod. This class should have a special method called flame_jet that will update the condition of another podracer to "trashed".


class Podracer:
  def __init__(self, max_speed, condition, price):
    self.max_speed = max_speed
    self.condition = condition
    self.price = price

  def repair(self):
      if self.condition == "trashed":
        print("podracer under repair")
      elif self.condition == "perfect":
        print("No repairs needed, Maintenance advised")
      else:
        print("podracer repaired")
      print("Podracer turbo has a", self.max_speed, "mph " + self.condition + "cost", self.price, "rupies." )

# post = Podracer(100, "trashed", 34000)
# post.repair()

class AnakinsPod(Podracer):
  def __init__(self, max_speed, condition, price):
    super().__init__(max_speed, condition, price)

  def boost(self):
   faster = self.max_speed * 2
   print(faster)

# x = AnakinsPod(100, "perfect", 34000)
# x.boost()

class SulbubasPod(Podracer):
  def __init__(self, max_speed, condition, price):
    super().__init__(max_speed, condition, price)

  def flame_jet(self):
   if self.condition != "trashed":
     self.condition = "trashed"
     print("Sulbubas fury has reached you! Your Pod is " + self.condition)


x = SulbubasPod(100, "perfect", 34000)
x.flame_jet()

  
